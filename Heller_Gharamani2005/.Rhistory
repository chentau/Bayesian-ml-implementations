install.packages("rstan")
install.packages("rstan")
install.packages("mirt")
a <- rnorm(100)
plot(a)
plot(a, rep(0, 100))
plot(a, rep(0, 100), ylim=c(0,1))
plot(dnorm(a))
plot(a, dnorm(a))
a <- rnorm(100)
plot(a, rep(0,100), ylim=c(0,1))
lines(a, dnorm(a), type="l")
plot(a, rep(0,100), ylim=c(0,1))
lines(a, dnorm(a))
plot(a, dnorm(a))
plot(a, dnorm(a), type="l")
plot(a, dnorm(a), type="o")
plot(a, dnorm(a), type="b")
plot(a, density(a))
density(a)
plot(density(a))
points(a, rep(0,100))
`3pl` <- readRDS("~/repos/paper-criticalperiods_tics_response/data/3pl.rds")
3pl <- readRDS("~/repos/paper-criticalperiods_tics_response/data/3pl.rds")
'3pl'' <- readRDS("~/repos/paper-criticalperiods_tics_response/data/3pl.rds")
'3pl'' <- readRDS("~/repos/paper-criticalperiods_tics_response/data/3pl.rds")
'3pl' <- readRDS("~/repos/paper-criticalperiods_tics_response/data/3pl.rds")
`4pl` <- readRDS("~/repos/paper-criticalperiods_tics_response/data/4pl.rds")
'3pl' <- readRDS("~/repos/paper-criticalperiods_tics_response/data/3pl.rds")
?readRDS
'3pl' <- readRDS(file="~/repos/paper-criticalperiods_tics_response/data/3pl.rds")
?saveRDS
?save
?tempfile
install.packages("lavaan")
#To be run on the cluster because the files are too big
library(tidyverse)
?getCor
library(lavaan)
?getCov
cor <- "
1
-.56 1
-.38 .58 1
-.54 .72 .52 1
-.22 .31 .34 .33 1
-.30 34 .46 .44 .53 1
-.16 .23 .24 .27 .25 .44 1
"
cormat <- getCov(cor, names=c("mutual, confdep, react, negself, delinq, aggr, emoimpr"))
cormat <- getCov(cor, names=c("mutual", "confdep", "react", "negself", "delinq", "aggr", "emoimpr"))
cormat
cov2cor(cormat)
?sem
setwd("~/repos/implementations/Heller_Gharamani2005")
rstan_options(auto_write = TRUE)
library(rstan)
library(bridgesampling)
rstan_options(auto_write = TRUE)
?sampling
model = stan_model(model_code=model_code)
model_code = "data {
int<lower=0> N;
int<lower=0> D;
vector[N] y;
real<lower=0> kappa;
}
parameters {
vector[D] mu;
cov_matrix[D] Sigma;
}
model {
target += wishart_lpdf(Sigma | 5, diag(rep_vector(1, D)));
target += multi_normal_lpdf(mu| 0, kappa*Sigma);
target += multi_normal_lpdf(y| mu, Sigma);
}
"
dat = list(y = c(.01802844, .5068836, -1.851, 1.326), N = 4, D = 1, kappa = 1)
model = stan_model(model_code=model_code)
model_code = "data {
int<lower=0> N;
int<lower=0> D;
vector[N] y;
real<lower=0> kappa;
}
parameters {
vector[D] mu;
cov_matrix[D] Sigma;
}
model {
target += wishart_lpdf(Sigma | 5, diag_matrix(rep_vector(1, D)));
target += multi_normal_lpdf(mu| 0, kappa*Sigma);
target += multi_normal_lpdf(y| mu, Sigma);
}
"
model = stan_model(model_code=model_code)
model_code = "data {
int<lower=0> N;
int<lower=0> D;
vector[N] y;
real<lower=0> kappa;
}
parameters {
vector[D] mu;
cov_matrix[D] Sigma;
}
model {
target += wishart_lpdf(Sigma | 5, diag_matrix(rep_vector(1, D)));
target += multi_normal_lpdf(mu| rep_vector(0, D), kappa*Sigma);
target += multi_normal_lpdf(y| mu, Sigma);
}
"
model = stan_model(model_code=model_code)
out = sampling(model, data=dat)
model_code = "
data {
int<lower=0> N;
int<lower=0> D;
vector[N][D] y;
real<lower=0> kappa;
}
parameters {
vector[D] mu;
cov_matrix[D] Sigma;
}
model {
target += wishart_lpdf(Sigma | 5, diag_matrix(rep_vector(1, D)));
target += multi_normal_lpdf(mu| rep_vector(0, D), kappa*Sigma);
target += multi_normal_lpdf(y| mu, Sigma);
}
"
model = stan_model(model_code=model_code)
model_code = "
data {
int<lower=0> N;
int<lower=0> D;
matrix[N, D] y;
real<lower=0> kappa;
}
parameters {
vector[D] mu;
cov_matrix[D] Sigma;
}
model {
target += wishart_lpdf(Sigma | 5, diag_matrix(rep_vector(1, D)));
target += multi_normal_lpdf(mu| rep_vector(0, D), kappa*Sigma);
target += multi_normal_lpdf(y| mu, Sigma);
}
"
model = stan_model(model_code=model_code)
model_code = "
data {
int<lower=0> N;
int<lower=0> D;
vector[N] y;
real<lower=0> kappa;
}
parameters {
vector[D] mu;
cov_matrix[D] Sigma;
}
model {
target += wishart_lpdf(Sigma | 5, diag_matrix(rep_vector(1, D)));
target += multi_normal_lpdf(mu| rep_vector(0, D), kappa*Sigma);
for (n in 1:N)
target += multi_normal_lpdf(y[N]| mu, Sigma);
}
"
model = stan_model(model_code=model_code)
